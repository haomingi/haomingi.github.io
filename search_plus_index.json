{"./":{"url":"./","title":"自述","keywords":"","body":"自述 岁寒，然后知松柏之后凋也。 一个前端开发者，记录前端开发的一些笔记，共勉。 内容主题 静态基础 javaScript基础 ES6 vue react 2019面试笔记整理 js学习资料 javaScript高级编程第三版 你不知道的javaScript上、中、下 Gitbook学习资料 Gitbook简易教程 GitBook插件整理 部分资料来源于互联网，如有侵权，请联系：haomingi@sina.com Copyright © 2019 haomingi all right reserved，powered by Gitbook该文件修订时间： 2019-06-12 10:39:26 "},"docs/info.html":{"url":"docs/info.html","title":"介绍","keywords":"","body":"介绍 开始 主要记录在前端开发的过程中，学习积累的一些知识。从一个前端小白，到现在从事前端开发已有五年时间，我也不知道自己学习了多少知识，趁此机会查漏补缺。 本篇记录的内容都是一些我认为好的，平常工作中用到但是对具体的概念、细节不是很清晰的内容，希望阅读者具备一定的前端开发基础。 Copyright © 2019 haomingi all right reserved，powered by Gitbook该文件修订时间： 2019-06-12 11:20:55 "},"docs/front/":{"url":"docs/front/","title":"静态基础","keywords":"","body":"本章说 在前端开发中，Html、css是必不可少的两块内容，其中一些内容平时有用到，但是对其概念内容却理解的不是很深入! Html BFC(块级格式化上下文) 重绘、回流 css 多行文本溢出 水平垂直居中 防抖 硬件加速 Copyright © 2019 haomingi all right reserved，powered by Gitbook该文件修订时间： 2019-06-14 10:59:11 "},"docs/front/html.html":{"url":"docs/front/html.html","title":"Html","keywords":"","body":"Html Copyright © 2019 haomingi all right reserved，powered by Gitbook该文件修订时间： 2019-06-14 10:41:17 "},"docs/front/css.html":{"url":"docs/front/css.html","title":"css","keywords":"","body":"css Copyright © 2019 haomingi all right reserved，powered by Gitbook该文件修订时间： 2019-06-14 10:41:20 "},"docs/js/":{"url":"docs/js/","title":"javaScript基础","keywords":"","body":"本章说 学习js部分导言，介绍学习js必懂的入门知识！个人认为从入门到熟练，会打断点跟代码是必备掌握的技能！ 隐式强制类型转换 this Copyright © 2019 haomingi all right reserved，powered by Gitbook该文件修订时间： 2019-06-14 11:01:35 "},"docs/js/base.html":{"url":"docs/js/base.html","title":"基础内容","keywords":"","body":"js Copyright © 2019 haomingi all right reserved，powered by Gitbook该文件修订时间： 2019-06-11 18:49:42 "},"docs/es6/":{"url":"docs/es6/","title":"ES6","keywords":"","body":"本章说 Es6中提供的新的Api，对以往开发过程中遇到的一些问题给出了官方解决方案，提高了效率，但针对于使用，我们也要变通的、转换方式的去了解其实现! 箭头函数 Promise Set Map 生成器 迭代器 Symbol Copyright © 2019 haomingi all right reserved，powered by Gitbook该文件修订时间： 2019-06-14 10:59:05 "},"docs/es6/base.html":{"url":"docs/es6/base.html","title":"箭头函数","keywords":"","body":"箭头函数 箭头函数表达式的语法比函数表达式更简洁，并且没有自己的this，arguments，super或 new.target。这些函数表达式更适用于那些本来需要匿名函数的地方，并且它们不能用作构造函数。 基础用法 var elements = [ 'Hydrogen', 'Helium', 'Lithium', 'Beryllium' ]; elements.map(function(element) { return element.length; }); // 返回数组：[8, 6, 7, 9] // 上面的普通函数可以改写成如下的箭头函数 elements.map((element) => { return element.length; }); // [8, 6, 7, 9] // 当箭头函数只有一个参数时，可以省略参数的圆括号 elements.map(element => { return element.length; }); // [8, 6, 7, 9] // 当箭头函数的函数体只有一个 `return` 语句时，可以省略 `return` 关键字和方法体的花括号 elements.map(element => element.length); // [8, 6, 7, 9] 不绑定this 在箭头函数出现之前，每个新定义的函数都有它自己的 this值（在构造函数的情况下是一个新对象，在严格模式的函数调用中为 undefined，如果该函数被作为'对象方法'调用则为基础对象等）。 function Person() { // Person() 构造函数定义 `this`作为它自己的实例. this.age = 0; setInterval(function growUp() { // 在非严格模式, growUp()函数定义 `this`作为全局对象, // 与在 Person()构造函数中定义的 `this`并不相同. this.age++; }, 1000); } var p = new Person(); 箭头函数不会创建自己的this,它只会从自己的作用域链的上一层继承this。因此，在下面的代码中，传递给setInterval的函数内的this与封闭函数中的this值相同： function Person(){ this.age = 0; setInterval(() => { this.age++; // |this| 正确地指向 p 实例 }, 1000); } var p = new Person(); 通过 call 或 apply 调用 箭头函数没有自己的this指针，通过 call() 或 apply() 方法调用一个函数时，只能传递参数（不能绑定this），他们的第一个参数会被忽略。 箭头函数被声明的时候，就会从自己的作用域链的上一层继承this，call() 或 apply()调用箭头函数，跟普通函数效果不同，this不会发生改变！ var a = { o: 1 } var b = { o: 2 } // 声明函数objFun function objFun () { return () => { console.log(this) } } // 此时箭头函数被声明，this确定 var c = objFun.call(a) // 结果{o: 1} c() // 更改不会生效,结果{o: 1} c.call(b) 不绑定this 箭头函数不绑定Arguments对象。因此，在本示例中，arr使用的是创建的arguments数组，foo中f函数中的arguments只是引用了封闭作用域内的arguments。 var arguments = [1, 2, 3]; // 此处的arguments就是上面的数组，不是函数内的参数 var arr = () => arguments[0]; var a = arr(); // 1 console.log(a); function foo (n, s) { // 隐式绑定 foo 函数的 arguments 对象. arguments[0] 是 n // arguments[1]=4 n=1 ; 4 + 1 = 5 var f = () => arguments[1] + n; return f(); } var f = foo(1, 4); // 5 console.log(f); 像函数一样使用箭头函数 箭头函数继承父作用域this 'use strict'; var obj = { i: 10, b: () => console.log(this.i, this), c: function() { console.log( this.i, this) } } obj.b(); // undefined, Window{...} obj.c(); // 10, Object {...} Object.defineProperty()的示例 'use strict'; var obj = { a: 10 }; Object.defineProperty(obj, \"b\", { get: () => { console.log(this.a, typeof this.a, this); return this.a+10; // 代表全局对象 'Window', 因此 'this.a' 返回 'undefined' } }); // undefined \"undefined\" Window {postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, frames: Window, …} obj.b; prototype示例 foo = 1111 function A() { this.foo = 1 } A.prototype.bar = () => console.log(this.foo) let a = new A() // 打印结果1111。此处箭头函数指向仍然是Window a.bar() 使用 new 操作符 箭头函数不能用作构造器，和 new一起用会抛出错误。 var Foo = () => {}; // TypeError: Foo is not a constructor var foo = new Foo(); 使用prototype属性 箭头函数没有prototype属性。 var Foo = () => {}; // undefined console.log(Foo.prototype); 使用 yield 关键字 yield 关键字通常不能在箭头函数中使用（除非是嵌套在允许使用的函数内）。因此，箭头函数不能用作生成器。 Copyright © 2019 haomingi all right reserved，powered by Gitbook该文件修订时间： 2019-06-14 17:45:19 "},"docs/vue/":{"url":"docs/vue/","title":"vue","keywords":"","body":"本章说 学习vue部分导言，介绍学习vue必懂的入门知识！ 什么是MVVM flux vue新增内容 函数式组件 动态watcher Copyright © 2019 haomingi all right reserved，powered by Gitbook该文件修订时间： 2019-06-14 10:58:20 "},"docs/vue/base.html":{"url":"docs/vue/base.html","title":"基础内容","keywords":"","body":"js Copyright © 2019 haomingi all right reserved，powered by Gitbook该文件修订时间： 2019-06-11 18:49:42 "},"docs/react/":{"url":"docs/react/","title":"react","keywords":"","body":"本章说 学习react部分导言，介绍学习react必懂的入门知识！ 发送ajax update hooks 高阶函数 Copyright © 2019 haomingi all right reserved，powered by Gitbook该文件修订时间： 2019-06-14 11:03:05 "},"docs/react/base.html":{"url":"docs/react/base.html","title":"基础内容","keywords":"","body":"js Copyright © 2019 haomingi all right reserved，powered by Gitbook该文件修订时间： 2019-06-11 18:49:42 "},"docs/offer/":{"url":"docs/offer/","title":"2019面试笔记整理","keywords":"","body":"本章说 2019-02月面试题库！ 数组拉平（递归） 柯里化 js动画与css动画对比 冒泡排序 数组去重 13转2进制 a、b交换数值 事件循环 Copyright © 2019 haomingi all right reserved，powered by Gitbook该文件修订时间： 2019-06-14 11:08:28 "},"docs/offer/base.html":{"url":"docs/offer/base.html","title":"基础内容","keywords":"","body":"js Copyright © 2019 haomingi all right reserved，powered by Gitbook该文件修订时间： 2019-06-11 18:49:42 "},"docs/gitBook/":{"url":"docs/gitBook/","title":"GitBook","keywords":"","body":"Gitbook常见命令 # 需要安装nodejs + yarn/npm node -v yarn -v/npm -v # 安装全局命令 yarn global add gitbook/npm install gitbook -g yarn global add gitbook-cli/npm install gitbook-cli -g # 查看是否安装成功 gitbook -V # 安装Gitbook依赖 gitbook install 此处依赖内容在package.json中的可以使用yarn/npm安装，安装速度更快 # 创建Gitbook项目 gitbook init 创建 # 本地启动预览 gitbook serve 本地启动 # 构建静态页面 gitbook build 打包 Copyright © 2019 haomingi all right reserved，powered by Gitbook该文件修订时间： 2019-06-12 10:35:20 "},"tags.html":{"url":"tags.html","title":"Tags","keywords":"","body":"tags Copyright © 2019 haomingi all right reserved，powered by Gitbook该文件修订时间： 2019-06-11 18:49:42 "}}